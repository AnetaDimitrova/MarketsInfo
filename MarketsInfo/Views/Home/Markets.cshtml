 @model List<MarketsInfo.Models.StockInfo>
@{
    ViewBag.Title = "Markets";
}
<h2>@ViewBag.Title</h2>
<h3>@ViewBag.Message</h3>
<style>
    body, * {
  font-family: Lato;
  font-size: 17px;
}

input {
  margin: 0 3px;
}

#chartdiv {
  width: 100%;
  height: 500px;
}

table {
    font-family: lato, sans-serif;
    border-collapse: collapse;
    width: 100%;
}

td, th {
    border: 1px solid #add8e6;
    text-align: left;
    padding: 8px;
}

tr:nth-child(even) {
    background-color: #afeeee;
}
</style>

<script type="text/JavaScript">
<!--
function timedRefresh(timeoutPeriod) {
	setTimeout("location.reload(true);",timeoutPeriod);
}

window.onload = timedRefresh(30000);

//   -->
</script>


@*<script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);
  function drawChart() {
    var data = google.visualization.arrayToDataTable([
      ['Mon', 20, 28, 38, 45],
      ['Tue', 31, 38, 55, 66],
      ['Wed', 50, 55, 77, 80],
      ['Thu', 77, 77, 66, 50],
      ['Fri', 68, 66, 22, 15]
      // Treat first row as data as well.
    ], true);

    var options = {
      legend:'none'
    };

    var chart = new google.visualization.CandlestickChart(document.getElementById('chart_div'));

    chart.draw(data, options);
  }
</script>*@


@*<div id="chart_div" style="width: 900px; height: 500px;"></div>*@

<table>
    <tr>
        <th>SYMBOL</th>
        <th>NAME</th>
        <th>BID</th>
        <th>ASK</th>
        <th>OPEN</th>
        <th>PREVIOUS CLOSE</th>
        <th>Date</th>
        <th>LAST</th>
    </tr>
    @foreach (var item in Model)
    {
        <tr>
            <td>@Html.DisplayFor(modelItem => item.Symbol)</td>
            <td>@Html.DisplayFor(modelItem => item.Name)</td>
            <td>@Html.DisplayFor(modelItem => item.Bid)</td>
            <td>@Html.DisplayFor(modelItem => item.Ask)</td>
            <td>@Html.DisplayFor(modelItem => item.Open)</td>
            <td>@Html.DisplayFor(modelItem => item.PreviousClose)</td>
            <td>@Html.DisplayFor(modelItem => item.StockDate)</td>
            <td>@Html.DisplayFor(modelItem => item.Last)</td>

        </tr>
    }
</table>
<br/>
<br/>

@*<div id="chartdiv"></div>
<script>
    

    var chartData = generateChartData();

    function generateChartData() {
        var chartData = [];
        
        var firstDate = new Date(2012, 0, 1);
        firstDate.setDate(firstDate.getDate() - 1000);
        firstDate.setHours(0, 0, 0, 0);

        for (var i = 0; i < 1000; i++) {
            var newDate = new Date(firstDate);
            newDate.setHours(0, i, 0, 0);

            var a = Math.round(Math.random() * (40 + i)) + 100 + i;
            var b = Math.round(Math.random() * 100000000);

            chartData.push({
                date: newDate,
                value: a,
                volume: b
            });
        }
        return chartData;
    }

    function addDataPoint() {
        var dataProvider = chart.dataSets[0].dataProvider;
        var newDate = new Date(dataProvider[dataProvider.length - 1].date.getTime());
        newDate.setHours(newDate.getHours(), newDate.getMinutes() + 1, newDate.getSeconds());
        var a = Math.round(Math.random() * (40 + 1000)) + 100 + 1000;
        var b = Math.round(Math.random() * 100000000);
        dataProvider.push({
            date: newDate,
            value: a,
            volume: b
        });
        dataProvider.shift();
    }

    function setThresholds() {

    }

    var chart = AmCharts.makeChart("chartdiv",
    {
        type: "stock",
        "theme": "none",
        pathToImages: "http://www.amcharts.com/lib/3/images/",
        glueToTheEnd: true,

        categoryAxesSettings: {
            minPeriod: "mm"
        },

        dataSets: [
            {
                color: "#b0de09",
                fieldMappings: [
                    {
                        fromField: "value",
                        toField: "value"
                    }, {
                        fromField: "volume",
                        toField: "volume"
                    }
                ],

                dataProvider: chartData,
                categoryField: "date"
            }
        ],

        panels: [
            {
                showCategoryAxis: false,
                title: "Value",
                percentHeight: 70,

                stockGraphs: [
                    {
                        id: "g1",
                        valueField: "value",
                        type: "smoothedLine",
                        lineThickness: 2,
                        bullet: "round"
                    }
                ],

                stockLegend: {
                    valueTextRegular: " ",
                    markerType: "none"
                },

                valueAxes: [
                    {
                        guides: [
                            {
                                value: 1100,
                                label: "BUY",
                                position: "right",
                                dashLength: 5
                            }, {
                                value: 1550,
                                label: "SELL",
                                position: "right",
                                dashLength: 5
                            }
                        ]
                    }
                ]
            },
            {
                title: "Volume",
                percentHeight: 30,
                stockGraphs: [
                    {
                        valueField: "volume",
                        type: "column",
                        cornerRadiusTop: 2,
                        fillAlphas: 1
                    }
                ],

                stockLegend: {
                    valueTextRegular: " ",
                    markerType: "none"
                }
            }
        ],

        chartScrollbarSettings: {
            graph: "g1",
            usePeriod: "10mm",
            position: "top"
        },

        chartCursorSettings: {
            valueBalloonsEnabled: true
        },

        periodSelector: {
            position: "top",
            dateFormat: "YYYY-MM-DD JJ:NN",
            inputFieldWidth: 150,
            periods: [
                {
                    period: "hh",
                    count: 1,
                    label: "1 hour",
                    selected: true

                }, {
                    period: "hh",
                    count: 2,
                    label: "2 hours"
                }, {
                    period: "hh",
                    count: 5,
                    label: "5 hour"
                }, {
                    period: "hh",
                    count: 12,
                    label: "12 hours"
                }, {
                    period: "MAX",
                    label: "MAX"
                }
            ]
        },

        panelsSettings: {
            usePrefixes: true
        }
    });

    setInterval(function() {
            // add data point
            addDataPoint();

            // update indictors
            chart.panels[0].valueAxes[0].guides[0].value = Math.round(Math.random() * 500) + 1000;
            chart.panels[0].valueAxes[0].guides[1].value = chart.panels[0].valueAxes[0].guides[0].value +
                Math.round(Math.random() * 400) +
                200;

            chart.validateData();
        },
        2000);
</script>*@
